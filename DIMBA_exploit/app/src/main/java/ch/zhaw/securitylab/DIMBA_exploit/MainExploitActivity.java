package ch.zhaw.securitylab.DIMBA_exploit;

import android.content.ComponentName;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
import android.view.MenuItem;
import android.view.View.OnClickListener;
import android.widget.Button;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import com.google.android.material.navigation.NavigationView;

import ch.zhaw.securitylab.DIMBA.AidlServiceCurrencyExchange;

public class MainExploitActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener {
	// -------------------------------------------- //
	// CONSTANTS
	// -------------------------------------------- //
	
	private static final String packageName = "ch.zhaw.securitylab.DIMBA";
	private static final String MESSAGES_PERMISSION = "ch.zhaw.securitylab.DIMBA.activity.auth.ActivityAuthMessages";
	private static final int MESSAGES_PERMISSION_ID = 1;

	// -------------------------------------------- //
	// FIELDS
	// -------------------------------------------- //
	
	// Service
	private boolean bound;
	private AidlServiceCurrencyExchange service;
	
	// -------------------------------------------- //
	// OVERRIDE
	// -------------------------------------------- //
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main_exploit);
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);
		
		// Drawer
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
			this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
		drawer.setDrawerListener(toggle);
		toggle.syncState();
		
		NavigationView navigationView = findViewById(R.id.nav_view);
		navigationView.setNavigationItemSelectedListener(this);
		
		// Service
		Intent intent = new Intent(this, ServiceClipboardSpy.class);
		startService(intent);
	}
	
	@Override
	protected void onDestroy() {
		super.onDestroy();
		Intent intent = new Intent(this, ServiceClipboardSpy.class);
		stopService(intent);
	}

	// -------------------------------------------- //
	// BUTTONS
	// -------------------------------------------- //
	
	private void button(int id, OnClickListener listener) {
		Button button = findViewById(id);
		button.setOnClickListener(listener);
	}

	@Override
	public void onBackPressed() {
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		if (drawer.isDrawerOpen(GravityCompat.START)) {
			drawer.closeDrawer(GravityCompat.START);
		} else {
			super.onBackPressed();
		}
	}
	
	// -------------------------------------------- //
	// NAVIGATION
	// -------------------------------------------- //
	
	@Override
	public boolean onNavigationItemSelected(MenuItem item) {
		// Handle navigation view item clicks here.
		int id = item.getItemId();
		Intent intent = null;

		if (id == R.id.remember_me) {
			intent = new Intent(this, ActivityRememberMe.class);
		// [5] CLIPBOARD DANGER
		} else if (id == R.id.clipboard_log) {
			intent = new Intent(this, ActivityClipboardLog.class);
		// [6] EXPORTED CONTENT PROVIDER
		// ONCE DONE, VULNERABLE ALSO TO [7] INTENT REDIRECTION
		} else if (id == R.id.exported_content_provider) {
			intent = new Intent(this, ActivityExportedContentProvider.class);
		// [9] EXPORTED ACTIVITY ALIAS
		} else if (id == R.id.exported_activity_alias) {
			intent = new Intent();
				intent.setClassName(packageName, "ch.zhaw.securitylab.DIMBA.SeeInvest");
		// [20] FRAGMENT INJECTION
		} else if (id == R.id.fragment_injection) {
			intent = new Intent(this, ActivityFragmentInjection.class);
		// [21] INSECURE SERVICES
		} else if (id == R.id.insecure_services) {
			intent = new Intent(this, ActivityInsecureServices.class);
		}
		if (intent != null) startActivity(intent);
		
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		drawer.closeDrawer(GravityCompat.START);
		return true;
	}

	@NonNull
	private void openMessages() {
		Intent intent;
		intent = new Intent();
		intent.setClassName(packageName, MESSAGES_PERMISSION);
		startActivity(intent);
	}

	// -------------------------------------------- //
	// CURRENCY EXCHANGE SERVICE
	// -------------------------------------------- //
	
	@Override
	protected void onStart() {
		super.onStart();
		// Bind to LocalService
		String className = "ch.zhaw.securitylab.DIMBA.service.ServiceCurrencyExchange";
		
		Intent intent = new Intent();
		intent.setComponent(new ComponentName(packageName, className));
		bindService(intent, Connection, BIND_AUTO_CREATE);
	}
	
	@Override
	protected void onStop() {
		super.onStop();
		unbindService(Connection);
		bound = false;
	}
	
	private void boundOrThrow()
	{
		if (!bound) throw new RuntimeException("No service bound");
	}
	
	private void changeExchangeRate(String exchangeRate, String currency) {
		boundOrThrow();
		try {
			service.changeExchangeRate(exchangeRate, currency);
		} catch (RemoteException e) {
			throw new RuntimeException(e.getMessage());
		}
	}
	
	private ServiceConnection Connection = new ServiceConnection() {
		// Called when the connection with the service is established
		public void onServiceConnected(ComponentName className, IBinder localService) {
			// Following the example above for an AIDL interface,
			// this gets an instance of the IRemoteInterface, which we can use to call on the service
			service = AidlServiceCurrencyExchange.Stub.asInterface(localService);
			bound = true;
		}
		// Called when the connection with the service disconnects unexpectedly
		public void onServiceDisconnected(ComponentName className) {
			service = null;
			bound = false;
		}
	};

	@Override
	public void onRequestPermissionsResult(int requestCode, String permissions[], int[] grantResults) {
		switch (requestCode) {
			case MESSAGES_PERMISSION_ID: {
				// If request is cancelled, the result arrays are empty.
				if (grantResults.length > 0	&& grantResults[0] == PackageManager.PERMISSION_GRANTED) {
					openMessages();
				}
				return;
			}
		}
	}
}
