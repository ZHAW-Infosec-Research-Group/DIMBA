package ch.zhaw.securitylab.DIBA_exploit;

import android.util.Base64;

import java.security.spec.KeySpec;
import javax.crypto.Cipher;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.SecretKeySpec;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import androidx.appcompat.app.AppCompatActivity;


public class ActivityRememberMe extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_remember_me);
        Button button = findViewById(R.id.decryptButton);
        button.setOnClickListener(decryptButton());
    }

    private View.OnClickListener decryptButton() {
        return (View v) -> {
            TextView textviewEncrypt = (TextView) findViewById(R.id.encrypt);
            String ciphertext = textviewEncrypt.getText().toString();
            String cleartext = decrypt(ciphertext);

            TextView textviewDecrypt = (TextView) findViewById(R.id.decrypt);
            textviewDecrypt.setText(cleartext);
        };
    }

    private static final String REMEMBER_ME = "rememberMe";

    private static String convert(String paramString, int paramInt) {

        Cipher localCipher = getCipher(paramInt, getSecretKey());
        byte[] arrayOfByte = paramString.getBytes();
        byte[] paramByte;
        if (paramInt == 2)
        {
            arrayOfByte = Base64.decode(paramString, 0);
        }
        try
        {
            paramByte = localCipher.doFinal(arrayOfByte);
            if (paramInt == 1)
            {
                return Base64.encodeToString(paramByte, 2);
            }
            paramString = new String(paramByte);
            return paramString;
        }
        catch (Exception e)
        {
            throw new RuntimeException(e);
        }
    }

    public static String decrypt(String paramString)
    {
        return convert(paramString, 2);
    }

    public static String encrypt(String paramString)
    {
        return convert(paramString, 1);
    }

    private static Cipher getCipher(int paramInt, SecretKey paramSecretKey)
    {
        IvParameterSpec localIvParameterSpec = new IvParameterSpec("1234567890abcdef".getBytes());
        try
        {
            Cipher localCipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
            localCipher.init(paramInt, paramSecretKey, localIvParameterSpec);
            return localCipher;
        }
        catch (Exception e)
        {
            throw new RuntimeException(e);
        }
    }

    private static SecretKey getSecretKey()
    {
        Object localObject = "ababababababababababab".getBytes();
        try
        {
            localObject = new PBEKeySpec("rememberMe".toCharArray(), (byte[]) localObject, 1000, 256);
            localObject = new SecretKeySpec(SecretKeyFactory.getInstance("PBEWithSHA256And256BitAES-CBC-BC").generateSecret((KeySpec) localObject).getEncoded(), "AES");
            return (SecretKey) localObject;
        }
        catch (Exception localException)
        {
            throw new RuntimeException(localException);
        }
    }
}
