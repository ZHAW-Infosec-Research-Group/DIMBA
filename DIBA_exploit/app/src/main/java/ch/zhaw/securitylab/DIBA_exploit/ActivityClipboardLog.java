package ch.zhaw.securitylab.DIBA_exploit;

import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Bundle;
import android.os.IBinder;

import android.widget.ArrayAdapter;
import android.widget.ListView;

import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;

import java.util.ArrayList;
import java.util.List;

import ch.zhaw.securitylab.DIBA_exploit.ServiceClipboardSpy.LocalBinder;

public class ActivityClipboardLog extends AppCompatActivity {
	// -------------------------------------------- //
	// FIELDS
	// -------------------------------------------- //
	
	private ListView clipboardLog;
	private ArrayAdapter<String> adapter;
	private ServiceClipboardSpy service;
	private boolean bound;
	
	// -------------------------------------------- //
	// CONSTRUCT & CREATE
	// -------------------------------------------- //
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_clipboard_log);
		Toolbar toolbar = findViewById(R.id.toolbar);
		setSupportActionBar(toolbar);
		
		clipboardLog = findViewById(R.id.list_viwe_clipboard_log);
		adapter = new ArrayAdapter<>(this, R.layout.clipboard_entry);
	}
	
	// -------------------------------------------- //
	// SERVICE
	// -------------------------------------------- //
	
	@Override
	protected void onStart() {
		super.onStart();
		
		// Bind to LocalService
		Intent intent = new Intent(this, ServiceClipboardSpy.class);
		bindService(intent, mConnection, Context.BIND_AUTO_CREATE);
		clipboardLog.setAdapter(adapter);
		
		new Thread(() -> {
			waitForBound();
			this.runOnUiThread(() -> {
				List<String> text = service.getLog();
				System.out.println(text);
				adapter.addAll(text);
			});
		}).start();
	}
	
	private void waitForBound() {
		while (!bound) {
			try {
				Thread.sleep(200);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
	
	@Override
	protected void onStop() {
		super.onStop();
		unbindService(mConnection);
		bound = false;
	}
	
	
	/**
	 * Defines callbacks for service binding, passed to bindService()
	 */
	private ServiceConnection mConnection = new ServiceConnection() {
		
		@Override
		public void onServiceConnected(ComponentName className, IBinder localService) {
			// We've bound to LocalService, cast the IBinder and get LocalService instance
			LocalBinder binder = (LocalBinder) localService;
			service = binder.getService();
			bound = true;
		}
		
		@Override
		public void onServiceDisconnected(ComponentName arg0)
		{
			bound = false;
		}
	};
}
